definitions:
  common.Response:
    properties:
      description:
        type: string
      internal_code:
        type: integer
    type: object
  internal_account_model.BusinessDataLogic:
    properties:
      economic_activity:
        type: string
      inn:
        type: string
      name:
        type: string
      website:
        type: string
    type: object
  internal_account_model.PersonalDataLogic:
    properties:
      email:
        type: string
      full_name:
        type: string
      geography:
        type: string
      job_position:
        type: string
    type: object
  internal_auth_model.BusinessDataLogic:
    properties:
      economic_activity:
        example: Производство
        type: string
      inn:
        example: "7707083893"
        type: string
      name:
        example: ООО ИНФАНТЕМ
        type: string
      website:
        example: infantem.tech
        type: string
    required:
    - inn
    type: object
  internal_auth_model.PersonalDataLogic:
    properties:
      full_name:
        example: Иванов Иван Иванович
        type: string
      geographic:
        properties:
          city:
            example: Москва
            type: string
          country:
            example: Российская Федерация
            type: string
        type: object
      position:
        example: Старший менеджер по инвестициям
        type: string
    required:
    - full_name
    type: object
  model.ChangeConstantUnitLogic:
    properties:
      category:
        type: string
      name:
        type: string
      value: {}
    type: object
  model.ChangeConstantsRequest:
    properties:
      elements:
        items:
          $ref: '#/definitions/model.ChangeConstantUnitLogic'
        type: array
    type: object
  model.EmailValidateRequest:
    properties:
      code:
        type: integer
    required:
    - code
    type: object
  model.EmailValidateResponse:
    properties:
      description:
        type: string
      internal_code:
        type: integer
      valid:
        type: boolean
    type: object
  model.GetCalcActiveElementsResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/model.UiCategoryLogic'
        type: array
    type: object
  model.GetCommonInfoResponse:
    properties:
      business_data:
        $ref: '#/definitions/internal_account_model.BusinessDataLogic'
      personal_data:
        $ref: '#/definitions/internal_account_model.PersonalDataLogic'
    type: object
  model.GetConstantsResponse:
    properties:
      county_prices:
        items:
          properties:
            county_id:
              type: integer
            county_name:
              type: string
            county_price:
              type: number
          type: object
        type: array
      machine_prices:
        items:
          properties:
            machine_id:
              type: integer
            machine_name:
              type: string
            machine_price:
              type: integer
          type: object
        type: array
      mean_salaries:
        items:
          properties:
            industry_id:
              type: integer
            industry_name:
              type: string
            salary:
              type: integer
          type: object
        type: array
      other_needs:
        items:
          properties:
            need_coeff:
              type: number
            need_id:
              type: integer
            need_name:
              type: string
          type: object
        type: array
      patent_prices:
        items:
          properties:
            patent_id:
              type: integer
            patent_name:
              type: string
            patent_price:
              type: integer
          type: object
        type: array
    type: object
  model.GetResultsByUserResponse:
    properties:
      results:
        items:
          properties:
            name:
              type: string
            report_id:
              type: string
            summary:
              type: integer
            time_stamp:
              type: string
          type: object
        type: array
    type: object
  model.PrepareResetPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  model.PrepareResetPasswordResponse:
    properties:
      description:
        type: string
      internal_code:
        type: integer
      session_key:
        type: string
    type: object
  model.RegistrationDataLogic:
    properties:
      email:
        example: example@mail.ru
        type: string
      password:
        example: 1234qwerty!
        type: string
      repeated_password:
        example: 1234qwerty!
        type: string
    required:
    - email
    - password
    - repeated_password
    type: object
  model.ResetPasswordRequest:
    properties:
      password:
        type: string
      repeated_password:
        type: string
    required:
    - password
    - repeated_password
    type: object
  model.ResetPasswordResponse:
    properties:
      description:
        type: string
      internal_code:
        type: integer
    type: object
  model.SetActiveForElementRequest:
    properties:
      elements:
        items:
          $ref: '#/definitions/model.UiChangeElementLogic'
        type: array
    type: object
  model.SignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.SignInResponse:
    properties:
      description:
        type: string
      email:
        type: string
      internal_code:
        type: integer
    type: object
  model.SignOutResponse:
    properties:
      description:
        type: string
      internal_code:
        type: integer
    type: object
  model.SignUpRequest:
    properties:
      auth_data:
        $ref: '#/definitions/model.RegistrationDataLogic'
      business_data:
        $ref: '#/definitions/internal_auth_model.BusinessDataLogic'
      personal_data:
        $ref: '#/definitions/internal_auth_model.PersonalDataLogic'
    type: object
  model.SignUpResponse:
    properties:
      description:
        type: string
      internal_code:
        type: integer
    type: object
  model.UiCategoryLogic:
    properties:
      category:
        type: string
      category_id:
        type: string
      elements:
        items:
          $ref: '#/definitions/model.UiElementLogic'
        type: array
    type: object
  model.UiChangeElementLogic:
    properties:
      active:
        type: boolean
      field_id:
        type: string
    type: object
  model.UiElementLogic:
    properties:
      comment:
        type: string
      field:
        type: string
      field_id:
        type: string
      options:
        items: {}
        type: array
      type:
        type: string
    type: object
  model.UpdateUserInfoRequest:
    properties:
      business_data:
        $ref: '#/definitions/internal_account_model.BusinessDataLogic'
      personal_data:
        $ref: '#/definitions/internal_account_model.PersonalDataLogic'
    type: object
  model.ValidateResetPasswordRequest:
    properties:
      validation_code:
        type: string
    required:
    - validation_code
    type: object
  model.ValidateResetPasswordResponse:
    properties:
      description:
        type: string
      internal_code:
        type: integer
    type: object
host: admin.gb.ldt2023.infantem.tech
info:
  contact:
    email: KlenoviySir@yandex.ru
    name: Docs developer
    url: https://t.me/KlenoviySirop
  description: JWT token in authorization bearer
  title: Core backend app for Leaders of Digital Transformation
  version: 1.0.0
paths:
  /account/constant:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetConstantsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get all constants for formula
      tags:
      - Account
      - Admin
    patch:
      description: Endpoint to change constants
      parameters:
      - description: Change constants body
        in: body
        name: updated_data
        required: true
        schema:
          $ref: '#/definitions/model.ChangeConstantsRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.Response'
      summary: Change constants for formula
      tags:
      - Account
      - Admin
  /account/info:
    get:
      description: Endpoint to get information about user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCommonInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get information about user
      tags:
      - Account
    put:
      description: Endpoint to get information about user
      parameters:
      - description: Updated information about user
        in: body
        name: updated_data
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserInfoRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCommonInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.Response'
      summary: Update user's information
      tags:
      - Account
  /account/results:
    get:
      description: Endpoint to get all information by user (temp w/o pagination)
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetResultsByUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get all results for account
      tags:
      - Account
  /auth:
    post:
      consumes:
      - application/json
      description: Accepts token from vendor which we process and returning pair of
        tokens
      parameters:
      - description: Vendor which is providing authorization
        enum:
        - apple
        - google
        in: query
        name: vendor
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Sign in or sign up via external vendor
      tags:
      - Authorization
  /auth/check:
    get:
      description: Validates that session is authorized
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
      summary: Health and auth check
      tags:
      - Authorization
  /auth/email/validate:
    post:
      consumes:
      - application/json
      description: Validating user's email with take message on email and writing
        code
      parameters:
      - description: Data for validation by email from app
        in: body
        name: code
        required: true
        schema:
          $ref: '#/definitions/model.EmailValidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.EmailValidateResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
      summary: Validating user's email
      tags:
      - Authorization
  /auth/password/reset:
    put:
      consumes:
      - application/json
      description: Resetting password by getting validated email for password change
      parameters:
      - description: Session key to identify that this is current session of password
          change
        in: header
        name: t-session-key
        required: true
        type: string
      - description: New password pair with confirmation to update credentials
        in: body
        name: new_pswds
        required: true
        schema:
          $ref: '#/definitions/model.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
      summary: Resetting password
      tags:
      - Authorization
      - Password
  /auth/password/reset/prepare:
    patch:
      consumes:
      - application/json
      description: Creates session for password reset
      parameters:
      - description: Session key for backend's session validation
        in: body
        name: new_pswds
        required: true
        schema:
          $ref: '#/definitions/model.PrepareResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PrepareResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
      summary: Make reset password session
      tags:
      - Authorization
      - Password
  /auth/password/reset/validate:
    patch:
      consumes:
      - application/json
      description: Validate reset password session by code that user gets on its email
      parameters:
      - description: Session key to identify that this is current session of password
          change
        in: header
        name: t-session-key
        required: true
        type: string
      - description: Code from email to validate request
        in: body
        name: new_pswds
        required: true
        schema:
          $ref: '#/definitions/model.ValidateResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ValidateResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
      summary: Validate reset password session
      tags:
      - Authorization
      - Password
  /auth/sign/in:
    post:
      consumes:
      - application/json
      description: Authorization and get access token
      parameters:
      - description: Authorization data from user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/common.Response'
      summary: Sign in
      tags:
      - Authorization
      - Login
  /auth/sign/out:
    delete:
      consumes:
      - application/json
      description: Delete tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SignOutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/common.Response'
      summary: Sign out
      tags:
      - Authorization
      - Login
  /auth/sign/up:
    post:
      consumes:
      - application/json
      description: Sign up with data which was in our task
      parameters:
      - description: Authorization data from user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/common.Response'
      summary: Sign up with base data
      tags:
      - Authorization
      - Login
  /ui/calc/element/active:
    get:
      description: Get specification for ui elements to visualise it on frontend
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCalcActiveElementsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get UI elements for calculator
      tags:
      - UI
    patch:
      description: Set state of activity for element
      parameters:
      - description: Fields and their states
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SetActiveForElementRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCalcActiveElementsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/common.Response'
      summary: Set active/inactive state for element
      tags:
      - UI
      - Admin
schemes:
- https
swagger: "2.0"
